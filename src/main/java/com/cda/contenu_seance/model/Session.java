/*
* This code has been generated by the Rebel: a code generator for modern Java.
*
* Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
*/
package com.cda.contenu_seance.model;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.Hibernate;
import org.springframework.format.annotation.DateTimeFormat;

import javax.persistence.*;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Objects;


@Entity
@Getter
@Setter
@NoArgsConstructor

public class Session {
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
//    @Temporal(TemporalType.DATE)
    @DateTimeFormat(pattern = "yyyy-MM-dd")
    private LocalDate dateDebut;
//    @Temporal(TemporalType.DATE)
    @DateTimeFormat(pattern = "yyyy-MM-dd")
    private LocalDate dateFin;

    private int durerTotal;

    @ManyToOne(fetch = FetchType.LAZY)
    private Centre centre;

    //(fetch = FetchType.LAZY)
    //    @JoinColumn(name = "formation_id")
    @ManyToOne
    private Formation formation;

    @ManyToOne
    private Coordinateur coordinateur;

    @OneToMany(mappedBy = "session")
    private List<Seance> seances;

    @ManyToMany(mappedBy = "sessions")
    private List <Formateur> formateurs;
//

    public Session(LocalDate dateDebut, LocalDate dateFin,Centre centre, List<Seance> seances) {
        this.dateDebut = dateDebut;
        this.dateFin = dateFin;
        this.centre = centre;
        this.seances = seances;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
        Session session = (Session) o;
        return id != null && Objects.equals(id, session.id);
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }



    public int calSumSeance(){

        List <Seance> seance = getSeances();
//
//            int result = seance.stream().mapToInt(unSeance-> unSeance.getDurer()).sum();
//            return result;

//        List <Seance> seance = getSeances();
//

        return getSeances().stream().mapToInt(Seance::getDurer).sum();


    }

    public int calSumSeanceFormateur(Formateur formateur){

        return formateur.getSessions()
                .stream()
                .mapToInt(total->formateur.getSeances()
                        .stream().findFirst().get().getDurer())
                .sum();
    }

//    public int calSumSeanceFormateur(Session session){
//

//    }

    public long dureeTotalSession(LocalDate dateDebut,LocalDate dateFin,long nbSemaine, long nbJourferie){


       long total = ChronoUnit.DAYS.between(dateDebut,dateFin);
        for (int i = 0; i < nbSemaine; i++) {
            long nbWeek =-2;
            total = total + nbWeek ;
        }


        //"Duree="+ChronoUnit.DAYS.between(dateDebut, dateFin) ->session view
        return total -nbJourferie;
    }

}